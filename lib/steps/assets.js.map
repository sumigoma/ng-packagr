{"version":3,"file":"assets.js","sourceRoot":"","sources":["../../../src/lib/steps/assets.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport { readFile } from 'fs-extra';\nimport { NgArtefacts } from '../ng-package-format/artefacts';\nimport { NgPackage } from '../ng-package-format/package';\nimport { CssUrl } from '../ng-package-format/entry-point';\nimport { BuildStep } from '../deprecations';\nimport * as log from '../util/log';\n\n// CSS Tools\nimport * as autoprefixer from 'autoprefixer';\nimport * as browserslist from 'browserslist';\nimport * as postcss from 'postcss';\nimport * as sass from 'node-sass';\nimport * as nodeSassTildeImporter from 'node-sass-tilde-importer';\nimport * as less from 'less';\nimport * as stylus from 'stylus';\nimport * as postcssUrl from 'postcss-url';\n\nexport const processAssets: BuildStep =\n  async ({ artefacts, entryPoint, pkg }): Promise<NgArtefacts> => {\n    // process templates\n    const templates = await Promise.all(\n      artefacts.templates()\n        .map(async (template) => {\n          return {\n            name: template,\n            content: await processTemplate(template)\n          };\n        })\n    );\n    templates.forEach((template) => {\n      artefacts.template(template.name, template.content);\n    });\n\n    // process stylesheets\n    const stylesheets = await Promise.all(\n      artefacts.stylesheets()\n        .map(async (stylesheet) => {\n          return {\n            name: stylesheet,\n            content: await processStylesheet(stylesheet, pkg.src, entryPoint.cssUrl)\n          };\n        })\n    );\n    stylesheets.forEach((stylesheet) => {\n      artefacts.stylesheet(stylesheet.name, stylesheet.content);\n    });\n\n    return Promise.resolve(artefacts);\n  }\n\n/**\n * Process a component's template.\n *\n * @param templateFilePath Path of the HTML templatefile, e.g. `/Users/foo/Project/bar/bar.component.html`\n * @return Resolved content of HTML template file\n */\nconst processTemplate =\n  (templateFilePath: string): Promise<string> =>\n    readFile(templateFilePath).then((buffer) => buffer.toString());\n\n/**\n * Process a component's stylesheet file. Each stylesheet will be processed individually.\n *\n * @param stylesheetFilePath Path of the stylesheet, e.g. '/Users/foo/Project/bar/bar.component.scss'\n * @param srcFolder Source folder from 'ng-package.json'\n * @return Rendered CSS content of stylesheet file\n */\nconst processStylesheet =\n  async (stylesheetFilePath: string, srcFolder: string, cssUrl: CssUrl): Promise<string> => {\n\n    try {\n      log.debug(`Render styles for ${stylesheetFilePath}`);\n      const cssStyles: string = await renderPreProcessor(stylesheetFilePath, srcFolder);\n\n      log.debug(`determine browserslist for ${stylesheetFilePath}`);\n      const browsers = browserslist(undefined, { stylesheetFilePath });\n\n      log.debug(`postcss with autoprefixer for ${stylesheetFilePath}`);\n      const postCssPlugins = [autoprefixer({ browsers })];\n\n      if (cssUrl !== CssUrl.none) {\n        log.debug(`postcssUrl: ${cssUrl}`);\n        postCssPlugins.push(postcssUrl({ url: cssUrl }));\n      }\n      const result: postcss.Result = await postcss(postCssPlugins)\n        .process(cssStyles, {\n          from: stylesheetFilePath,\n          to: stylesheetFilePath.replace(path.extname(stylesheetFilePath), '.css')\n        });\n\n      // Escape existing backslashes for the final output into a string literal, which would otherwise escape the character after it\n      result.css = result.css.replace(/\\\\/g, '\\\\\\\\');\n\n      // Log warnings from postcss\n      result.warnings().forEach((msg) => {\n        log.warn(msg.toString());\n      });\n\n      return Promise.resolve(result.css);\n    } catch (err) {\n      return Promise.reject(new Error(`Cannot inline stylesheet ${stylesheetFilePath}`));\n    }\n\n  }\n\n\nasync function renderPreProcessor(filePath: string, srcPath: string): Promise<string> {\n\n  switch (path.extname(filePath)) {\n\n    case '.scss':\n    case '.sass':\n      log.debug(`rendering sass from ${filePath}`);\n      return await renderSass({ file: filePath, importer: nodeSassTildeImporter });\n\n    case '.less':\n      log.debug(`rendering less from ${filePath}`);\n      return await renderLess({ filename: filePath });\n\n    case '.styl':\n    case '.stylus':\n      log.debug(`rendering styl from ${filePath}`);\n      return await renderStylus({ filename: filePath, root: srcPath });\n\n    case '.css':\n    default:\n      log.debug(`reading css from ${filePath}`);\n      return readFile(filePath).then((buffer) => buffer.toString());\n  }\n\n}\n\nconst renderSass = (sassOpts: any): Promise<string> => {\n\n  return new Promise((resolve, reject) => {\n\n    sass.render(sassOpts, (err, result) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result.css.toString());\n      }\n    });\n  });\n}\n\nconst renderLess = (lessOpts: any): Promise<string> => {\n\n  return readFile(lessOpts.filename)\n    .then(buffer => buffer.toString())\n    .then((lessData: string) => new Promise<string>((resolve, reject) => {\n      less.render(lessData || '', lessOpts, (err, result) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(result.css.toString());\n        }\n      })\n    }));\n}\n\n/**\n * filename - absolute path to file\n * root - root folder of project (where ng-package.json is located)\n */\nconst renderStylus = ({ filename, root }): Promise<string> => {\n  return readFile(filename)\n    .then(buffer => buffer.toString())\n    .then((stylusData: string) => new Promise<string>((resolve, reject) => {\n      stylus(stylusData)\n        // add paths for resolve\n        .include(root)\n        .include('.')\n        // add support for resolving plugins from node_modules\n        .include('node_modules')\n        .set('filename', filename)\n        // turn on url resolver in stylus, same as flag --resolve-url\n        .set('resolve url', true)\n        .define('url', stylus.resolver())\n        .render((err, css) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(css);\n          }\n        });\n    }));\n}\n"]}