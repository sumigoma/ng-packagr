{"version":3,"file":"build-ng-package.js","sourceRoot":"","sources":["../../../src/lib/steps/build-ng-package.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,8DAA6D;AAE7D,uCAAyC;AACzC,mCAAmC;AACnC,2CAAwC;AACxC,iCAA0C;AAC1C,qEAA4D;AAE5D,2CAA2C;AAC3C,wBAAqC,IAAkB;;QACrD,GAAG,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAErC,IAAI,SAAoB,CAAC;QACzB,IAAI,CAAC;YACH,qFAAqF;YACrF,SAAS,GAAG,MAAM,uBAAgB,CAAC,IAAI,CAAC,CAAC;YAEzC,wFAAwF;YACxF,MAAM,eAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YAE7B,MAAM,SAAS,GAAG,IAAI,uBAAW,CAAC,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAChE,MAAM,yCAAgB,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,CAAC,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC;YACrF,GAAG,CAAC,CAAC,MAAM,SAAS,IAAI,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC9C,MAAM,SAAS,GAAG,IAAI,uBAAW,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;gBACxD,MAAM,yCAAgB,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC;YAC/E,CAAC;YAED,MAAM,gBAAS,CAAC,GAAG,SAAS,CAAC,GAAG,YAAY,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;YAC9D,MAAM,gBAAS,CAAC,GAAG,SAAS,CAAC,GAAG,UAAU,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;YAE5D,0DAA0D;YAC1D,MAAM,eAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;YACzC,GAAG,CAAC,OAAO,CAAC;WACL,SAAS,CAAC,GAAG;WACb,SAAS,CAAC,IAAI;KACpB,CAAC,CAAC;QACL,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,uDAAuD;YACvD,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACjB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACd,GAAG,CAAC,IAAI,CAAC,2EAA2E,SAAS,CAAC,gBAAgB,GAAG,CAAC,CAAC;YACrH,CAAC;YAED,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;CAAA;AApCD,wCAoCC","sourcesContent":["import * as path from 'path';\nimport { CliArguments } from '../commands/build.command';\nimport { NgArtefacts } from '../ng-package-format/artefacts';\nimport { NgPackage } from '../ng-package-format/package';\nimport { copyFiles } from '../util/copy';\nimport * as log from '../util/log';\nimport { rimraf } from '../util/rimraf';\nimport { discoverPackages } from './init';\nimport { transformSources } from './entry-point-transforms';\n\n// XX: should eventually become a BuildStep\nexport async function buildNgPackage(opts: CliArguments): Promise<void> {\n  log.info(`Building Angular Package`);\n\n  let ngPackage: NgPackage;\n  try {\n    // READ `NgPackage` from either 'package.json', 'ng-package.json', or 'ng-package.js'\n    ngPackage = await discoverPackages(opts);\n\n    // clean the primary dest folder (should clean all secondary module directories as well)\n    await rimraf(ngPackage.dest);\n\n    const artefacts = new NgArtefacts(ngPackage.primary, ngPackage);\n    await transformSources({ artefacts, entryPoint: ngPackage.primary, pkg: ngPackage });\n    for (const secondary of ngPackage.secondaries) {\n      const artefacts = new NgArtefacts(secondary, ngPackage);\n      await transformSources({ artefacts, entryPoint: secondary, pkg: ngPackage });\n    }\n\n    await copyFiles(`${ngPackage.src}/README.md`, ngPackage.dest);\n    await copyFiles(`${ngPackage.src}/LICENSE`, ngPackage.dest);\n\n    // clean the working directory for a successful build only\n    await rimraf(ngPackage.workingDirectory);\n    log.success(`Built Angular Package!\n - from: ${ngPackage.src}\n - to:   ${ngPackage.dest}\n    `);\n  } catch (error) {\n    // Report error messages and throw the error further up\n    log.error(error);\n    if (ngPackage) {\n      log.info(`Build failed. The working directory was not pruned. Files are stored at ${ngPackage.workingDirectory}.`);\n    }\n\n    throw error;\n  }\n}\n"]}