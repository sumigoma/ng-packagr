{"version":3,"file":"init.js","sourceRoot":"","sources":["../../../src/lib/steps/init.ts"],"names":[],"mappings":"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","sourcesContent":["import { SchemaClassFactory } from '@ngtools/json-schema';\nimport { pathExists, readJson, lstat } from 'fs-extra';\nimport * as glob from 'glob';\nimport * as path from 'path';\nimport * as log from '../util/log';\nimport { ensureUnixPath } from '../util/path';\nimport { NgPackageConfig } from '../../ng-package.schema';\nimport { NgArtefacts } from '../ng-package-format/artefacts';\nimport { NgEntryPoint } from '../ng-package-format/entry-point';\nimport { NgPackage } from '../ng-package-format/package';\nimport { BuildStep } from '../deprecations';\nimport { debug } from '../util/log';\n\n/** Creates a SchemaClass for `NgPackageConfig` */\nconst NgPackageSchemaClass =\n  SchemaClassFactory<NgPackageConfig>(require('../../ng-package.schema.json'));\n\n/** Instantiates a concrete schema from `NgPackageConfig` */\nconst instantiateSchemaClass =\n  (ngPackageJson: NgPackageConfig) => new NgPackageSchemaClass(ngPackageJson);\n\nconst fileExists =\n  async (pathLike: string): Promise<boolean> =>\n    await pathExists(pathLike) && (await lstat(pathLike)).isFile();\n\ninterface UserPackage {\n  packageJson: object,\n  ngPackageJson: object,\n  basePath: string\n}\n\n/**\n * Resolves a user's package by testing for 'package.json', 'ng-package.json', or 'ng-package.js'.\n *\n * @param folderPathOrFilePath A path pointing either to a file or a directory\n * @return The user's package\n */\nconst resolveUserPackage =\n  async (folderPathOrFilePath: string): Promise<UserPackage | undefined> => {\n    const pathStats = await lstat(folderPathOrFilePath);\n    const fullPath = path.isAbsolute(folderPathOrFilePath) ? folderPathOrFilePath : path.resolve(folderPathOrFilePath);\n    const basePath = pathStats.isDirectory() ? fullPath : path.dirname(fullPath);\n\n    const packageJson = await readJson(path.join(basePath, 'package.json'));\n    const ngPackageJsonPath = path.join(basePath, 'ng-package.json');\n    const ngPackageJsPath = path.join(basePath, 'ng-package.js');\n\n    let ngPackageJson: undefined | object;\n\n    if (packageJson['ngPackage']) {\n      // Read `ngPackage` from `package.json`\n      ngPackageJson = { ...packageJson['ngPackage'] }\n    } else if (await fileExists(ngPackageJsonPath)) {\n      // Read 'ng-package.json' file\n      ngPackageJson = await readJson(ngPackageJsonPath);\n    } else if ((await fileExists(ngPackageJsPath))) {\n      // Dynamic `require('<path>') the given file\n      ngPackageJson = await import(ngPackageJsPath);\n    }\n\n    if (ngPackageJson) {\n      return {\n        basePath,\n        packageJson,\n        ngPackageJson\n      } as UserPackage;\n    }\n\n    if (pathStats.isDirectory()) {\n      // return even if it's undefined and use defaults when it's not a file\n      return undefined;\n    }\n\n    if (pathStats.isFile()) {\n      // a project file was specified but was in valid\n      if (path.basename(folderPathOrFilePath) === \"package.json\") {\n        throw new Error(`Cannot read a package from 'package.json' without 'ngPackage' property.`);\n      }\n\n      throw new Error(`Trying to read a package from unsupported file extension. Path=${folderPathOrFilePath}`);\n    }\n\n    throw new Error(`Cannot discover package sources at ${folderPathOrFilePath}`);\n  }\n\n/** Reads a primary entry point from it's package file. */\nconst primaryEntryPoint =\n  ({ packageJson, ngPackageJson, basePath }: UserPackage): NgEntryPoint =>\n    new NgEntryPoint(\n      packageJson,\n      ngPackageJson,\n      instantiateSchemaClass(ngPackageJson),\n      basePath\n    );\n\n/**\n * Scans `directoryPath` and sub-folders, looking for `package.json` files.\n * Similar to `find ${directoryPath} --name package.json --exec dirname {}`.\n *\n * @param directoryPath Path pointing to a directory\n * @param excludeFolder A sub-folder of `directoryPath` that is excluded from search results.\n */\nconst findSecondaryPackagesPaths =\n  async (directoryPath: string, excludeFolder: string): Promise<string[]> => {\n    let excludedFolders = [\n      'node_modules',\n      'dist',\n      '.ng_build',\n      '.ng_pkg_build',\n      path.resolve(directoryPath, excludeFolder)\n    ]\n\n    const EXCLUDE_FOLDERS = [];\n    for (let folder of excludedFolders) {\n      EXCLUDE_FOLDERS.push(`**/${folder}/**/package.json`);\n      EXCLUDE_FOLDERS.push(`**/${folder}/**/ng-package.json`);\n    }\n    EXCLUDE_FOLDERS.push(directoryPath + '/package.json');\n    EXCLUDE_FOLDERS.push(directoryPath + '/ng-package.json');\n\n\n\n    return new Promise<string[]>((resolve, reject) => {\n      glob(`${directoryPath}/**/*package.json`,\n        { ignore: EXCLUDE_FOLDERS, cwd: directoryPath },\n        (err, files) => {\n          if (err) {\n            reject(err);\n          }\n\n          resolve(files);\n        }\n      );\n    })\n      .then((filePaths) => Promise.all(\n        filePaths\n          .map((filePath) => path.dirname(filePath))\n          .filter((value, index, array) => array.indexOf(value) === index)\n      ));\n  }\n\n/**\n * Reads a secondary entry point from it's package file.\n *\n * @param primaryDirectoryPath A path pointing to the directory of the primary entry point.\n * @param primary The primary entry point.\n */\nconst secondaryEntryPoint =\n  (primaryDirectoryPath: string, primary: NgEntryPoint, { packageJson, ngPackageJson, basePath }: UserPackage): NgEntryPoint => {\n\n    if (path.resolve(basePath) === path.resolve(primaryDirectoryPath)) {\n      log.error(`Cannot read secondary entry point. It's already a primary entry point. path=${basePath}`);\n      throw new Error(`Secondary entry point is already a primary.`);\n    }\n\n    const relativeSourcePath = path.relative(primaryDirectoryPath, basePath);\n    const secondaryModuleId = ensureUnixPath(`${primary.moduleId}/${relativeSourcePath}`);\n\n    return new NgEntryPoint(\n      packageJson,\n      ngPackageJson,\n      instantiateSchemaClass(ngPackageJson),\n      basePath,\n      {\n        moduleId: secondaryModuleId,\n        destinationPath: path.resolve(primary.destinationPath, relativeSourcePath)\n      }\n    );\n  }\n\nexport const discoverPackages =\n  async ({ project }: { project: string }): Promise<NgPackage> => {\n    project = path.isAbsolute(project) ? project : path.resolve(project);\n\n    const primaryPackage = await resolveUserPackage(project);\n    const primary = primaryEntryPoint(primaryPackage);\n    log.debug(`Found primary entry point: ${primary.moduleId}`);\n\n    const secondaries = await (findSecondaryPackagesPaths(primaryPackage.basePath, primary.$get('dest'))\n      .then((folderPaths) => Promise.all(folderPaths\n        .map((folderPath) => resolveUserPackage(folderPath)\n          .catch(() => {\n            log.warn(`Cannot read secondary entry point at ${folderPath}. Skipping.`);\n\n            return null;\n          })\n        )\n      ))\n      .then((secondaryPackages) => secondaryPackages\n        .filter((value) => !!value)\n        .map((secondaryPackage) => secondaryEntryPoint(primaryPackage.basePath, primary, secondaryPackage))\n      )\n    );\n    if (secondaries.length > 0) {\n      log.debug(`Found secondary entry points: ${secondaries.map(e => e.moduleId).join(', ')}`);\n    }\n\n    return new NgPackage(\n      primaryPackage.basePath,\n      primary,\n      secondaries\n    );\n  }\n"]}