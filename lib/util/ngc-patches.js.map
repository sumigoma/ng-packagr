{"version":3,"file":"ngc-patches.js","sourceRoot":"","sources":["../../../src/lib/util/ngc-patches.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAGH,4IAA4I;AAC5I,MAAM,eAAe,GAAG,oEAAoE,CAAC;AAK7F,+CAAmC;AAGnC,kGAAkG;AAClG,4BAAmC,OAA4B;IAC7D,MAAM,mBAAmB,GAAG,OAAO,CAAC,aAAa,KAAK,YAAY,CAAC;IACnE,MAAM,uBAAuB,GAAG,OAAO,CAAC,0BAA0B,CAAC;IACnE,EAAE,CAAC,CAAC,CAAC,mBAAmB,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC;QACrD,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IACD,EAAE,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACxB,mFAAmF;QACnF,iEAAiE;QACjE,mCAAmC;QACnC,OAAO,CAAC,qBAAqB,GAAG,IAAI,CAAC;IACvC,CAAC;IACD,MAAM,WAAW,GAGoE;QACnF,2BAA2B,EAAE,CAAC,QAAQ,EAAE,EAAE,CACT,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC5F,gBAAgB,EAAE,CAAC,OAAO,EAAE,UAAU,EAAE,EAAE,CAAC,EAAE;QAC7C,2BAA2B,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,KAAK;QAChD,kBAAkB,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ;QAC1C,UAAU,EAAE,KAAK;QACjB,OAAO,EAAE,IAAI;QACb,2BAA2B,EAAE,KAAK,EAAE,mBAAmB,EAAE,uBAAuB;KACjF,CAAC;IAEF,MAAM,CAAC,CAAC,EACC,OAAO,EACP,gBAAgB,EAChB,SAAS,EACT,iBAAiB,EACjB,gBAAgB,EAChB,kBAAkB,GAAG,EAAE,EACvB,IAAI,EACJ,OAAO,EACR,EAAE,EAAE,CACD,OAAO,CAAC,eAAe,CACnB,OAAO,oBAAM,WAAW,IAAE,OAAO,EAAE,IAAI,KAAG,IAAI,EAAE,OAAO,EAAE,gBAAgB,EACzE,SAAS,EAAE,iBAAiB,EAAE,gBAAgB,EAAE;QAC9C,QAAQ,EAAE,kBAAkB,CAAC,MAAM;QACnC,OAAO,EAAE,kBAAkB,CAAC,KAAK;KAClC,CAAC,CAAC;AACpB,CAAC;AA1CD,gDA0CC","sourcesContent":["/*\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// @link https://github.com/angular/angular/blob/24bf3e2a251634811096b939e61d63297934579e/packages/compiler-cli/src/transformers/util.ts#L14\nconst GENERATED_FILES = /(.*?)\\.(ngfactory|shim\\.ngstyle|ngstyle|ngsummary)\\.(js|d\\.ts|ts)$/;\n\nimport * as ts from 'typescript';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as tsickle from 'tsickle';\nimport * as api from '@angular/compiler-cli';\n\n// @link https://github.com/angular/angular/blob/83d207d/packages/compiler-cli/src/main.ts#L42-L84\nexport function createEmitCallback(options: api.CompilerOptions): api.TsEmitCallback|undefined {\n  const transformDecorators = options.annotationsAs !== 'decorators';\n  const transformTypesToClosure = options.annotateForClosureCompiler;\n  if (!transformDecorators && !transformTypesToClosure) {\n    return undefined;\n  }\n  if (transformDecorators) {\n    // This is needed as a workaround for https://github.com/angular/tsickle/issues/635\n    // Otherwise tsickle might emit references to non imported values\n    // as TypeScript elided the import.\n    options.emitDecoratorMetadata = true;\n  }\n  const tsickleHost: Pick<\n      tsickle.TsickleHost, 'shouldSkipTsickleProcessing'|'pathToModuleName'|\n      'shouldIgnoreWarningsForPath'|'fileNameToModuleId'|'googmodule'|'untyped'|\n      'convertIndexImportShorthand'|'transformDecorators'|'transformTypesToClosure'> = {\n    shouldSkipTsickleProcessing: (fileName) =>\n                                     /\\.d\\.ts$/.test(fileName) || GENERATED_FILES.test(fileName),\n    pathToModuleName: (context, importPath) => '',\n    shouldIgnoreWarningsForPath: (filePath) => false,\n    fileNameToModuleId: (fileName) => fileName,\n    googmodule: false,\n    untyped: true,\n    convertIndexImportShorthand: false, transformDecorators, transformTypesToClosure,\n  };\n\n  return ({\n           program,\n           targetSourceFile,\n           writeFile,\n           cancellationToken,\n           emitOnlyDtsFiles,\n           customTransformers = {},\n           host,\n           options\n         }) =>\n             tsickle.emitWithTsickle(\n                 program, {...tsickleHost, options, host}, host, options, targetSourceFile,\n                 writeFile, cancellationToken, emitOnlyDtsFiles, {\n                   beforeTs: customTransformers.before,\n                   afterTs: customTransformers.after,\n                 });\n}\n"]}