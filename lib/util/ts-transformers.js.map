{"version":3,"file":"ts-transformers.js","sourceRoot":"","sources":["../../../src/lib/util/ts-transformers.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport * as path from 'path';\n\nexport const isComponentDecorator =\n  (node: ts.Node): node is ts.Decorator => {\n    if (ts.isDecorator(node)) {\n      const callExpression = node.getChildren().find(ts.isCallExpression);\n      if (callExpression) {\n        const identifier = callExpression.getChildren().find(ts.isIdentifier);\n\n        return identifier && identifier.getText() === 'Component';\n        /* TODO: text comparison can break when\n        * `import { Component as foo } from '@angular/core'` or\n        * `import * as ng from '@angular/core'`\n        * @link https://github.com/angular/devkit/blob/master/packages/schematics/angular/utility/ast-utils.ts#L127-L128\n        */\n      }\n    }\n\n    return false;\n  }\n\nexport const isPropertyAssignmentFor =\n  (node: ts.Node, name: string): node is ts.PropertyAssignment =>\n    ts.isPropertyAssignment(node) && node.name.getText() === name;\n\nexport const isTemplateUrl =\n  (node: ts.Node): node is ts.PropertyAssignment => isPropertyAssignmentFor(node, 'templateUrl');\n\nexport const isStyleUrls =\n  (node: ts.Node): node is ts.PropertyAssignment => isPropertyAssignmentFor(node, 'styleUrls');\n\nexport type StylesheetProcessor = (sourceFile: string, styleUrl: string, styleFilePath: string) => string | undefined | void;\n\nexport type TemplateProcessor = (sourceFile: string, templateUrl: string, templateFilePath: string) => string | undefined | void;\n\nexport type ComponentTransformer =\n  ({}: {\n    templateProcessor: TemplateProcessor,\n    stylesheetProcessor: StylesheetProcessor,\n    sourceFileWriter?: any\n  }) => ts.TransformerFactory<ts.SourceFile>;\n\nexport const componentTransformer: ComponentTransformer =\n  ({ templateProcessor, stylesheetProcessor, sourceFileWriter }) =>\n    (context: ts.TransformationContext) => (sourceFile: ts.SourceFile): ts.SourceFile => {\n      // skip source files from 'node_modules' directory (third-party source)\n      if (sourceFile.fileName.includes('node_modules')) {\n        return sourceFile;\n      }\n      const sourceFilePath = sourceFile.fileName;\n\n      const visitComponents = (node: ts.Decorator): ts.Node => {\n        if (isTemplateUrl(node)) {\n          // XX: strip quotes (' or \") from path\n          const templatePath = node.initializer.getText().substring(1, node.initializer.getText().length - 1);\n          const templateFilePath = path.resolve(path.dirname(sourceFilePath), templatePath);\n          const template = templateProcessor(sourceFilePath, templatePath, templateFilePath);\n\n          if (typeof template === 'string') {\n            const synthesizedNode = ts.updatePropertyAssignment(\n              node,\n              ts.createIdentifier('template'),\n              ts.createLiteral(template)\n            );\n\n            if (sourceFileWriter) {\n              const synthesizedSourceText = 'template: `'.concat(template).concat('`');\n              sourceFileWriter(sourceFile, node, synthesizedSourceText);\n            }\n\n            return synthesizedNode;\n          } else {\n            return node;\n          }\n        } else if (isStyleUrls(node)) {\n          // handle array arguments for styleUrls\n          const styleUrls = node.initializer.getChildren()\n            .filter((node) => node.kind === ts.SyntaxKind.SyntaxList)\n            .map((node) => node.getChildren().map(n => n.getText()))\n            .reduce((prev, current) => prev.concat(...current), [])\n            .filter(text => text !== ',')\n            .map((url) => url.substring(1, url.length - 1));\n\n          const stylesheets = styleUrls.map((url: string) => {\n            const styleFilePath = path.resolve(path.dirname(sourceFilePath), url);\n            const content = stylesheetProcessor(sourceFilePath, url, styleFilePath);\n\n            return typeof content === 'string' ? content : url;\n          });\n\n          const hasChanged = stylesheets.every((value, index) => {\n            return styleUrls[index] && styleUrls[index] !== value;\n          });\n\n          if (hasChanged) {\n            const synthesizedNode = ts.updatePropertyAssignment(\n              node,\n              ts.createIdentifier('styles'),\n              ts.createArrayLiteral(\n                stylesheets.map((value) => ts.createLiteral(value))\n              )\n            );\n\n            if (sourceFileWriter) {\n              const synthesizedSourceText = 'styles: ['\n                .concat(stylesheets.map((value) => `\\`${value}\\``).join(', '))\n                .concat(']');\n              sourceFileWriter(sourceFile, node, synthesizedSourceText);\n            }\n\n            return synthesizedNode;\n          } else {\n            return node;\n          }\n        }\n\n        return ts.visitEachChild(node, visitComponents, context);\n      };\n\n      const visitDecorators = (node: ts.Node): ts.Node =>\n        isComponentDecorator(node)\n          ? ts.visitEachChild(node, visitComponents, context)\n          : ts.visitEachChild(node, visitDecorators, context);\n\n      return ts.visitNode(sourceFile, visitDecorators);\n    }\n"]}